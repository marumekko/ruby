# frozen_string_literal: true

# 4 配列や繰り返し処理を理解する
# 4.1 RGBカラー変換プログラムの作成
# 仕様
# ・10進数を16進数に変換するto_hexメソッドと、16進数を10進数に変換するto_intsメソッドの2つを定義する。
# ・to_hexメソッドは3つの整数を受け取り、それぞれを16進数に変換した文字列を返す。文字列の先頭には“#”を付ける。
# ・to_intsメソッドはRGBカラーを表す16進数文字列を受け取り、R、G、Bのそれぞれを10進数の整数に変換した値を配列として返す。

# 4.2 配列
# 配列とは複数のデータをまとめて格納できるオブジェクト
# 配列は[]と,を使って作成する（配列リテラル）
# 空の配列を作る
p []
# 3つの要素が格納された配列を作る [要素1,要素2,要素3]
p [1, 2, 3]
# 配列は Array オブジェクト
p [].class #=> Array

# 変数aに配列を代入
a = [1, 2, 3]
p a

# 異なるデータ型を格納可能 ex)数値と文字列
a = [1, 'apple', 2, 'orange', 3, 'melon']
p a

# 配列の中に配列を格納可能
a = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
p a

# 配列の各要素を取得する場合は、[]と添え字（数値）を使用
a = [1, 2, 3]
p a
# 1つめの要素を取得
p a[0] #=>1
# 2つめの要素を取得
p a[1] #=>2
# 3つめの要素を取得
p a[2] #=>3
# 存在しない要素を取得
p a[100] #=>nil
# を配列の長さ（要素の個数）を取得
# sizeメソッド（エイリアスメソッド: length）
p a.size #=>3
p a.length #=>3

# 4.2.1 要素の変更、追加、削除
# 指定した要素を変更
# 配列[添字] = 新しい値
a = [1, 2, 3]
a[1] = 20
p a #=> [1, 20, 3]

# 配列の最後に要素を追加
a = []
a << 1
a << 2
a << 3
p a #=> [1, 2, 3]

# 配列内の特定の位置にある要素を削除したい場合はdelete_atメソッドを使う
a = [1, 2, 3]
# 2番目の要素を削除（削除した値が戻り値）
p a.delete_at(1) #=>2
p a #=> [1,3]

# 4.2.2 配列を使った多重代入
a, b = [1, 2]
p a #=> 1
p b #=> 2

# 4.3 ブロック
# ブロックはメソッドの引数として渡すことができる処理のかたまり
# ブロック内で記述した処理は必要に応じてメソッドから呼び出される

# 4.3.2 Rubyの繰り返し処理
# do ~ end がブロックの範囲
numbers = [1, 2, 3, 4]
sum = 0
numbers.each do |n|
  sum += n
end
p sum #=>10

# 4.3.3 配列の要素を削除する条件を自由に指定する

# 配列から値が2の要素を削除
a = [1, 2, 3, 1, 2, 3]
a.delete(2) #=>[1,3,1,3]
p a

# 配列から値が奇数の要素を削除
# ブロックの戻り値が true なら削除
a = [1, 2, 3, 1, 2, 3]
a.delete_if do |n|
  n.odd?
end
p a #=>[2,2]

# 4.3.5 do...endと{}
numbers = [1, 2, 3, 4]
sum = 0
# do...endの代わりに{}を使用
numbers.each { |n| sum += n }
p sum #=>10

# 4.4 ブロックを使う配列のメソッド
# 4.4.1 map/collect
# エイリアスメソッドはcollect
# mapメソッドは各要素に対してブロックを評価した結果を新しい配列にして返す

# 例) に配列の各要素を10倍した新しい配列を作る
# each メソッドの場合
numbers = [1, 2, 3, 4, 5]
new_numbers = []
numbers.each { |n| new_numbers << n * 10 }
p new_numbers #=>[10,20,30,40,50]

# map メソッドの場合
numbers = [1, 2, 3, 4, 5]
# ブロックの戻り値が新しい配列の各要素になる
new_numbers = numbers.map { |n| n * 10 }
p new_numbers #=>[10,20,30,40,50]

# 4.4.2 select/find_all/reject
# selectメソッド（エイリアスメソッドはfind_all）は各要素に対してブロックを評価し、その戻り値が真の要素を集めた配列を返すメソッド

# 例) 偶数の数値だけを集めた配列を新たに作る
numbers = [1, 2, 3, 4, 5, 6]
# ブロックの戻り値が真になった要素だけが集められる
even_numbers = numbers.select { |n| n.even? }
p even_numbers #=>[2,4,6]

# rejectメソッドはselectメソッドの反対
# ブロックの戻り値が真になった要素を除外した配列を返す = ブロックの戻り値が偽である要素を集めるメソッド
numbers = [1, 2, 3, 4, 5, 6]
# 3の倍数を除外する（3の倍数以外を集める
non_multiples_of_three = numbers.reject { |n| (n % 3).zero? }
p non_multiples_of_three #=>[1,2,4,5]

# 4.4.3 find/detect
# findメソッド（エイリアスメソッドはdetect）はブロックの戻り値が真になった最初の要素を返す
numbers = [1, 2, 3, 4, 5, 6]
# ブロックの戻り値が最初に真になった要素を返す
even_number = numbers.find { |n| n.even? }
p even_number #=>2
