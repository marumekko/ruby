# frozen_string_literal: true

# 2.2.1 すべてがオブジェクト

# Rubyはオブジェクト指向言語である。数値や nil, true/false に対してもメソッドを呼び出せる。

# 文字列
puts '1'.to_s #=>"1"

# 数値
puts 1.to_s #=>"1"

# nil
puts nil.to_s #=>"nil"

# true/false
puts true.to_s #=>"true"
puts false.to_s #=>"false"

# 正規表現
puts /\d+/.to_s #=>"(?-mix:\d+)"

# 2.2.2 メソッド呼び出し

# 形式 : オブジェクト.メソッド(引数1, 引数2, 引数3) ※カッコは省略可能

puts 10.to_s(16)
puts 10.to_s 16

# 2.3 文字列
# 2.3.1 シングルクオートとダブルクオート

# ダブルクオートで囲むと\nが改行文字として機能する
puts "こんにちは\nさようなら"
# =>こんにちは
# さようなら

# シングルクオートで囲むと\nはただの文字列になる
puts 'こんにちは\nさようなら'
# =>こんにちは\nさようなら

# 2.4 数値

# 数値には_を含めることができます。_は無視されるので、大きな数の区切り文字として使うと便利です。
puts 1_000_000_000 #=>1000000000

# 整数同士の割り算は整数になる点に注意してください。小数点以下は切り捨てられます。
# 0.5ではなく0になる
puts 1 / 2 #=>0
# 小数点以下の値が必要な場合は、どちらかの値に小数点の.0を付けます。
puts 1.0 / 2 #=>0.5
puts 1 / 2.0 #=>0.5

# 変数に整数が入っている場合は、to_fメソッドを呼ぶことで整数から小数に変更することができます。
n = 1
puts n.to_f #=>1.0
puts n.to_f / 2 #=>0.5

# **はべき乗を求める演算子です。
puts 2**3 #=>8

# 2.4.3 変数に格納された数値の増減Rubyには変数の値を増減させる++やのような演算子がありません。これに近い演算子として、+=と=が用意されています。
# nを1増やす（n=n+1と同じ）
puts n += 1 #=>2

# nを1減らす（n=n1と同じ）
puts n = 1 #=>1

# 2.5.1 Ruby の真偽値
# falseまたはnilであれば偽。
# それ以外はすべて真。

data = nil

if !data.nil?
  puts 'データがあります'
else
  puts 'データはありません'
end

# Ruby の場合
if data
  puts 'データがあります'
else
  puts 'データはありません'
end

# 2.5.2 論理演算子
# 条件1 && 条件2は「条件1かつ条件2」-> 条件1も条件2も真であれば真、それ以外は偽
t1 = true
t2 = true
f1 = false
puts t1 && t2 #=>true
puts t1 && f1 #=>false

# 条件1||条件2は「条件1または条件2」-> 条件1か条件2のいずれかが真であれば真、両方偽であれば偽
# 優先順位 || < &&
t1 = true
f1 = false
f2 = false
puts t1 || f1 #=>true
puts f1 || f2 #=>false

# 2.8 文字列についてもっと詳しく
# 2.8.1 文字列は String クラスのオブジェクト
puts 'abc'.class #=>String

# 2.8.2 %記法で文字列を作る文字列はシングルクオートやダブルクオートだけでなく、%記法で作ることもできます。
# %記法を使うとシングルクオートやダブルクオートをエスケープする必要がありません。

# %q!!はシングルクオートで囲んだことと同じになる
puts %q!(Hesaid,"Don'tspeak.")! #=>Hesaid,"Don'tspeak."

# %Q!!はダブルクオートで囲んだことと同じになる（改行文字や式展開が使える）
something = 'Hello.'
puts %!(Hesaid,"#{something}")! #=>Hesaid,"Hello."#

# %!!もダブルクオートで囲んだことと同じになる
something = 'Bye.'
puts %!(Hesaid,"#{something}")! #=>Hesaid,"Bye."
